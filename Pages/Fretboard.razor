@page "/fretboard"
@using BlazorWasmGuitarScales.Services

<PageTitle>Fretboard</PageTitle>

<div class="container w-75 d-flex justify-content-center align-items-start">
    <div>
        <h1>Fretboard</h1>

        <div class="controls">
            <label>
                Key:
                <select @onchange="OnRootChanged" value="@selectedRoot">
                    @foreach (var key in rootOptions)
                    {
                        <option value="@key">@FormatNote(key)</option>
                    }
                </select>
            </label>
            <label>
                Scale:
                <select @onchange="OnScaleChanged" value="@selectedScale">
                    @foreach (var scale in scaleOptions)
                    {
                        <option value="@scale">@scale</option>
                    }
                </select>
            </label>
        </div>

        <div class="fretboard">
            <div class="fret-marker-row">
                @for (int fret = 0; fret <= NumberOfFrets; fret++)
                {
                    <div class="fret-marker">
                        @if (markerFrets.Contains(fret))
                        {
                            <span>@(fret == 12 ? "••" : "•")</span>
                        }
                    </div>
                }
            </div>

            @foreach (var stringPair in fretboard)
            {
                <div class="string-row">
                    @foreach (var note in stringPair.Value)
                    {
                        <div class="fret @GetNoteCss(note)">
                            <span>@FormatNote(note)</span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private const int NumberOfFrets = 12;

    // Index 0 = string 6 (low E), 5 = string 1 (high E)
    private readonly NoteName[] tunings = { NoteName.E, NoteName.A, NoteName.D, NoteName.G, NoteName.B, NoteName.E };

    private readonly HashSet<int> markerFrets = new() { 1, 3, 5, 7, 9, 12 };

    private Dictionary<int, List<NoteName>> fretboard = new();
    private HashSet<NoteName> scaleNotes = ScaleService.GetScaleNotes(NoteName.C, ScaleType.Major);

    private NoteName selectedRoot = NoteName.C;
    private ScaleType selectedScale = ScaleType.Major;

    private List<NoteName> rootOptions = ScaleService.GetAvailableKeys();
    private List<ScaleType> scaleOptions = ScaleService.GetAvailableScales();

    protected override void OnInitialized()
    {
        BuildFretboard();
        UpdateScaleNotes();
    }

    private void BuildFretboard()
    {
        fretboard.Clear();

        for (int stringIndex = 0; stringIndex < tunings.Length; stringIndex++)
        {
            var frets = new List<NoteName>();
            var openNote = tunings[stringIndex];

            for (int fret = 0; fret <= NumberOfFrets; fret++)
            {
                frets.Add(ScaleService.GetNoteFrom(openNote, fret));
            }

            fretboard[stringIndex] = frets;
        }
    }

    private void UpdateScaleNotes()
    {
        scaleNotes = ScaleService.GetScaleNotes(selectedRoot, selectedScale);
    }

    private void OnRootChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<NoteName>(e.Value?.ToString(), out var result))
        {
            selectedRoot = result;
            UpdateScaleNotes();
        }
    }

    private void OnScaleChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<ScaleType>(e.Value?.ToString(), out var result))
        {
            selectedScale = result;
            UpdateScaleNotes();
        }
    }

    private string GetNoteCss(NoteName note)
    {
        if (scaleNotes.Contains(note)) return "in-scale";
        else return "not-in-scale";
    }

    private string FormatNote(NoteName note) =>
        note.ToString().Replace("s", "#");
}