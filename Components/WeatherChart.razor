@using ChartJs.Blazor
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Utils
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using BlazorWasmGuitarScales.Models
@using BlazorWasmGuitarScales.Services
@inject IJSRuntime JSRuntime
@inject WeatherService WeatherService

<h3>Temperatur Interval</h3>

@if (forecast is null)
{
    <p>Loading forecast...</p>
}
else
{
    <RawChartJS Id="weatherChart" Config="chartConfig" />
}

@code {
    /// <summary>
    /// The weather forecast data.
    /// </summary>
    private WeatherResponse? forecast;

    /// <summary>
    /// The configuration object for the chart.
    /// </summary>
    private object? chartConfig;

    /// <summary>
    /// Color settings for the chart.
    /// </summary>
    public string colorText = "#f7ffff";
    public string colorIcon = "#cbd6da";
    public string colorPrimary = "#6d859f";
    public string colorHover = "#cbd6da";
    public string colorBg = "#14222d";

    /// <summary>
    /// Called when the component is initialized.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch weather data for Copenhagen for the next 5 days.
            forecast = await WeatherService.GetWeatherDataAsync("Copenhagen", 5);

            // If forecast data is available, build the chart.
            if (forecast?.Forecast?.Forecastday is not null)
            {
                BuildChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading forecast: {ex.Message}");
        }
    }

    /// <summary>
    /// Called after the component has been rendered.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && forecast != null)
        {
            // Initialize the chart using JavaScript.
            await JSRuntime.InvokeVoidAsync("setupChart", "weatherChart", chartConfig);
        }
    }

    /// <summary>
    /// Builds the chart configuration object.
    /// </summary>
    private void BuildChart()
    {
        var labels = forecast!.Forecast!.Forecastday!.Select(d => d.Date).ToList();
        var avg = forecast.Forecast.Forecastday!.Select(d => d.Day?.Avgtemp_C ?? 0).ToList();
        var min = forecast.Forecast.Forecastday!.Select(d => d.Day?.Mintemp_C ?? 0).ToList();
        var max = forecast.Forecast.Forecastday!.Select(d => d.Day?.Maxtemp_C ?? 0).ToList();
        var hourlyTemp = forecast.Forecast.Forecastday!.SelectMany(d => d.Hour!).Select(h => h.Temp_C).ToList();

        chartConfig = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new[]
                {
                    new {
                        label = "Avg Temp",
                        backgroundColor = "rgb(109, 133, 159)",
                        borderColor = "rgb(109, 133, 159)",
                        data = avg
                    },
                    new {
                        label = "Min Temp",
                        backgroundColor = "rgb(203, 214, 218)",
                        borderColor = "rgb(203, 214, 218)",
                        data = min
                    },
                    new {
                        label = "Max Temp",
                        backgroundColor = "rgb(247, 255, 255)",
                        borderColor = "rgb(247, 255, 255)",
                        data = max
                    }
                }
            },
            options = new
            {
                responsive = true,
                title = new
                {
                    display = true,
                    text = "Temperature (°C)",
                    fontColor = "#6d859f"
                },
                legend = new
                {
                    labels = new
                    {
                        fontColor = "#6d859f"
                    }
                },
                scales = new
                {
                    xAxes = new[]
                    {
                        new {
                            ticks = new
                            {
                                fontColor = "#6d859f"
                            }
                        }
                    },
                    yAxes = new[]
                    {
                        new {
                            ticks = new
                            {
                                fontColor = "#6d859f"
                            }
                        }
                    }
                }
            }
        };
    }

    /// <summary>
    /// Disposes the chart when the component is disposed.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("destroyChart", "weatherChart");
    }
}
